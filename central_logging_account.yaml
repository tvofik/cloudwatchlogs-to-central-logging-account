AWSTemplateFormatVersion: "2010-09-09"
Description: Set up resources for delivery for centralizing logs to S3 in centralized logging account.
Parameters: 
  DeliveryStreamName:
    Type: String
    Description: Enter the name of the kinesis firehose delivery stream.
    Default: "Centralized-Logging-Delivery-Stream"
  DeliveryBucketName:
    Type: String
    Description: Enter the name of the Bucket to store logs
  OrgId:
    Type: String
    Description: Enter the name of the kinesis firehose delivery stream.

Resources:

  ProcessCWLtoFirehoseRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal: 
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: firehoseCloudWatchDataProcessing
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"

  FirehoseDataProcessingFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt ProcessCWLtoFirehoseRole.Arn
      Description: "Firehose cloudwatch data processing"
      Code:
        ZipFile: |
          'use strict';
          const zlib = require('zlib');
          function transformLogEvent(logEvent) {
                return Promise.resolve(`${logEvent.message}`);
          }
          exports.handler = (event, context, callback) => {
              Promise.all(event.records.map(r => {
                  const buffer = new Buffer(r.data, 'base64');
                  const decompressed = zlib.gunzipSync(buffer);
                  const data = JSON.parse(decompressed);
                  const accountId = data.owner;
                  
                  if (data.messageType !== 'DATA_MESSAGE') {
                      return Promise.resolve({
                          recordId: r.recordId,
                          result: 'ProcessingFailed',
                      });
                  } else {
                      const promises = data.logEvents.map(transformLogEvent);
                      return Promise.all(promises).then(transformed => {
                          let payload = transformed.reduce((a, v) => a + v, '');
                          payload += `Account ID: ${accountId}\n`;
                          const encoded = new Buffer(payload).toString('base64');
                          console.log('---------------payloadv2:'+JSON.stringify(payload, null, 2));
                          return {
                              recordId: r.recordId,
                              result: 'Ok',
                              data: encoded,
                          };
                    });
                  }
              })).then(recs => callback(null, { records: recs }));
          };
      Runtime: nodejs18.x
      Timeout: "300"

  FirehoseDeliveryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: Firehose_Delivery_Policy
          PolicyDocument:
            - Version: "2012-10-17"
              Statement:
              - Effect: Allow
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${DeliveryBucketName}"
                  - !Sub "arn:${AWS::Partition}:s3:::${DeliveryBucketName}/*"
              # - Effect: Allow
              #   Action:
              #     - "lambda:InvokeFunction"
              #   Resource:
              #     - !GetAtt FirehoseDataProcessingFunction.Arn

  KinesisFireHose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Ref DeliveryStreamName
      DeliveryStreamType: "DirectPut"
      S3DestinationConfiguration:
        BucketARN: !Sub "arn:${AWS::Partition}:s3:::${DeliveryBucketName}"
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn

  CWLtoKinesisRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service:
                - logs.ap-east-1.amazonaws.com
                - logs.ap-south-2.amazonaws.com
                - logs.ap-southeast-3.amazonaws.com
                - logs.ap-southeast-4.amazonaws.com
                - logs.ap-south-1.amazonaws.com
                - logs.ap-northeast-3.amazonaws.com
                - logs.ap-northeast-2.amazonaws.com
                - logs.ap-southeast-1.amazonaws.com
                - logs.ap-southeast-2.amazonaws.com
                - logs.ap-northeast-1.amazonaws.com
                - logs.ca-central-1.amazonaws.com
                - logs.eu-central-1.amazonaws.com
                - logs.eu-west-1.amazonaws.com
                - logs.eu-west-2.amazonaws.com
                - logs.eu-south-1.amazonaws.com
                - logs.eu-west-3.amazonaws.com
                - logs.eu-south-2.amazonaws.com
                - logs.eu-north-1.amazonaws.com
                - logs.eu-central-2.amazonaws.com
                - logs.me-south-1.amazonaws.com
                - logs.me-central-1.amazonaws.com
                - logs.sa-east-1.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref OrgId
      Path: "/"
      Policies:
        - PolicyName: Permissions-Policy-For-CWL
          PolicyDocument:
            - Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                  - "firehose:PutRecord"
                  Resource:
                  - !GetAtt KinesisFireHose.Arn

  LogDestination: 
    Type: AWS::Logs::Destination
    Properties: 
      DestinationName: "CentralLogDestination"
      RoleArn: !GetAtt CWLtoKinesisRole.Arn
      TargetArn: !GetAtt KinesisFireHose.Arn
      DestinationPolicy: !Sub |
        '{"Version" : "2012-10-17","Statement" : [{"Effect" : "Allow", "Principal" : {"AWS" : "logs.amazonaws.com"}, "Action" : "logs:PutSubscriptionFilter", "Resource" : "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:destination:CentralLogDestination"}]}'

Outputs:
  LogDestinationARN:
    Description: ARN of the to deliver log events to.
    Value: !GetAtt LogDestination.Arn
